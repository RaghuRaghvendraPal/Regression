##################################Decision Tree Regression###########################

'''Note : Decision Tree Regression Model is not comfortable with 1D data But we will use it in MultiDimentional Data'''



''' in Decision trees we split our Data to Multiple groups then we perform tree to get that portion of data.
Like we have one group among X>20 and a<40 and y<140. If we want to predict the value of X then we this method will get Y by using average of that group. But How it will manage if we want to get the value for two group in same group according to this this will same value in both input that is average of those gruop.'''


''' Split is perform only if there is minimum 5% data in that gruop'''
# we will use same data to build another non linear data model
# we are building non linear model so we are removing all linear and polynomial model and building non linear model
# Non linear Regression Model is not based on Linear or Polynomial Regression Model

import numpy as np
import pandas as pd
from sklearn import datasets
import matplotlib.pyplot as plt

position_salaries = { 'Position' : [	'Business Analyst','Junior Consultant','Senior Consultant','Manager','Country Manager',
'Region Manager','Partner','Senior Partner','C-level','CEO'],
'Salary' : [45000,50000,60000,80000,110000,150000,200000,300000,500000,1000000],
'Level' : [1,2,3,4,5,6,7,8,9,10]
}

data = pd.DataFrame(position_salaries)
X = data.iloc[:,0:1].values# From This X will consider as matrix
y = data.iloc[:,2].values

# Here we do not need to split our data into training set or test 
# Splitting the dataset into the Training set and Test set
"""from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"""

# Feature Scaling
# from sklearn.preprocessing import StandardScaler
# sc_X = StandardScaler()
# X = sc_X.fit_transform(X)
# sc_y = StandardScaler()
# y = sc_y.fit_transform(y)

# set because we do not have enough amount of data here
# Fitting the Decision Tree Regression Model to the datasets
# Create your Regressor
from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state = 0)
regressor.fit(X, y)

#Predicting A result
Y_pred = regressor.predict(6.5)

# Visualizing the Decision Tree Regression 
# This will not work in Decision Tree Model we need to work with High resolution Graph


# plt.scatter(X, y, color = 'red')
# plt.plot(X, regressor.predict(X),color = 'blue')
# # plt.xticks(sc_X.inverse_transform(X))
# # plt.yticks(sc_y.inverse_transform(y))
# plt.title('Truth or Bluff(Decision Tree Regression)')
# plt.xlabel('Position Level')
# plt.ylabel('Salary')
# plt.show()


# Visualizing the Decision Tree Regression for Higher resolution and smoother curve
# X_grid  = np.arange(min(X), max(X), 0.1)
X_grid  = np.arange(min(X), max(X), 0.01)
X_grid = X_grid.reshape(len(X_grid), 1)
print(X_grid)
plt.scatter(X,y, color = 'red')
plt.plot(X_grid, regressor.predict(X_grid),color = 'blue')
plt.title('Truth or Bluff(Decision Tree Regression)')
plt.xlabel('Positiewon Level')
plt.ylabel('Salary')
plt.show()
